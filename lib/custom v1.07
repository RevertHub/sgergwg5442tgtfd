local Library = {}

local menu = game:GetObjects('rbxassetid://101831717227026')[1]
menu.Parent = cloneref(game.CoreGui)
menu.ResetOnSpawn = false


local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local Tabs = {}

local tabHolder = menu.bg.bg1.tabHolder
local Background = menu.bg

function Library.ToggleUI()
	menu.Enabled = not menu.Enabled
end

function Library.Unload()
	menu:Destroy()
end

local Notify = Instance.new("Frame")
local UIListLayout = Instance.new("UIListLayout")
local UIPadding = Instance.new("UIPadding")

Notify.Parent = menu
Notify.Name = "notify"
Notify.AnchorPoint = Vector2.new(0, 0.25)
Notify.BackgroundTransparency = 1
Notify.Position = UDim2.new(0, 0, 0.452, 0)
Notify.Size = UDim2.new(0.293, 0,1, 0)

UIListLayout.Parent = Notify
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left

UIPadding.Parent = Notify
UIPadding.PaddingLeft = UDim.new(0, 5)

function Library:Notify(notifyText)
	local Frame = Instance.new("Frame")
	local UICorner = Instance.new("UICorner")
	local UIStroke = Instance.new("UIStroke")
	local UIGradient = Instance.new("UIGradient")
	local DescText = Instance.new("TextLabel")
	local UIPadding_2 = Instance.new("UIPadding")

	if not menu:FindFirstChild("notify") then return end

	Frame.Parent = Notify
	Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
	Frame.Size = UDim2.new(0, 0, 0.046, 0)

	UICorner.Parent = Frame
	UICorner.CornerRadius = UDim.new(0, 8)

	UIStroke.Parent = Frame
	UIStroke.Color = Color3.fromRGB(255, 255, 255)
	UIStroke.Thickness = 3

	UIGradient.Parent = UIStroke
	UIGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.00, Color3.fromRGB(50, 50, 50)),
		ColorSequenceKeypoint.new(0.50, Color3.fromRGB(115, 100, 215)),
		ColorSequenceKeypoint.new(1.00, Color3.fromRGB(50, 50, 50))
	}
	UIGradient.Offset = Vector2.new(-1, 0)

	DescText.Name = "DescText"
	DescText.Parent = Frame
	DescText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	DescText.BackgroundTransparency = 1.000
	DescText.BorderColor3 = Color3.fromRGB(0, 0, 0)
	DescText.BorderSizePixel = 0
	DescText.Size = UDim2.new(1, 0, 1, 0)
	DescText.Font = Enum.Font.Roboto
	DescText.Text = notifyText
	DescText.TextColor3 = Color3.fromRGB(255, 255, 255)
	DescText.TextSize = 16.000
	DescText.TextXAlignment = Enum.TextXAlignment.Left
	DescText.TextTransparency = 1
	
	UIPadding_2.Parent = DescText
	UIPadding_2.PaddingLeft = UDim.new(0, 40)

	local TweenService = game:GetService("TweenService")

	local frameTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
	local textTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
	local fadeOutTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
	local gradientTweenInfo = TweenInfo.new(5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	
	local frameTweenIn = TweenService:Create(Frame, frameTweenInfo, {Size = UDim2.new(0.875, 0, 0.046, 0)})
	local textTweenIn = TweenService:Create(DescText, textTweenInfo, {TextTransparency = 0})
	
	frameTweenIn:Play()
	textTweenIn:Play()
	
	frameTweenIn.Completed:Connect(function()
		task.wait(0.5)
	
		local tweenGradient = TweenService:Create(UIGradient, gradientTweenInfo, {Offset = Vector2.new(1, 0)})
		tweenGradient:Play()
	
		tweenGradient.Completed:Connect(function()
			task.wait(0.5)
	
			local frameTweenOut = TweenService:Create(Frame, fadeOutTweenInfo, {Size = UDim2.new(0, 0, 0.046, 0)})
			local textTweenOut = TweenService:Create(DescText, fadeOutTweenInfo, {TextTransparency = 1})
	
			frameTweenOut:Play()
			textTweenOut:Play()
	
			frameTweenOut.Completed:Connect(function()
				Frame:Destroy()
			end)
		end)
	end)
	

	return Frame
end




Background.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
       dragging = true
       dragStart = input.Position
       startPos = Background.Position
 
       input.Changed:Connect(function()
          if input.UserInputState == Enum.UserInputState.End then
             dragging = false
          end
       end)
    end
end)
 
Background.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
       dragInput = input
    end
end)
 
game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
       local delta = input.Position - dragStart
       Background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

function Library:addTab(tabData)	
	local tabButton = Instance.new("Frame")
	local UICorner = Instance.new("UICorner")
	local UIGradient = Instance.new("UIGradient")
	local UIStroke = Instance.new("UIStroke")
	local UIGradient_1 = Instance.new("UIGradient")
	local text = Instance.new("TextLabel")
	local UIPadding = Instance.new("UIPadding")
	local tbIndicator = Instance.new("TextButton")

	tabButton.Name = "tabButton"
	tabButton.Parent = tabHolder
	tabButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	tabButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
	tabButton.BorderSizePixel = 0
	tabButton.Size = UDim2.new(1, 0, 0, 35)

	UICorner.Parent = tabButton

	UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(15, 15, 15)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(115, 100, 215))}
	UIGradient.Offset = Vector2.new(1, 0)
	UIGradient.Parent = tabButton

	UIStroke.Color = Color3.new(1, 1, 1)
	UIStroke.Thickness = 1
	UIStroke.Parent = tabButton

	UIGradient_1.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 30, 30)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(115, 100, 215))}
	UIGradient_1.Offset = Vector2.new(1, 0)
	UIGradient_1.Parent = UIStroke

	text.Name = "text"
	text.Parent = tabButton
	text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	text.BackgroundTransparency = 1.000
	text.BorderColor3 = Color3.fromRGB(0, 0, 0)
	text.BorderSizePixel = 0
	text.Size = UDim2.new(1, 0, 1, 0)
	text.Font = Enum.Font.Roboto
	text.Text = tabData.text
	text.TextColor3 = Color3.fromRGB(255, 255, 255)
	text.TextSize = 16.000
	text.TextWrapped = true
	text.TextXAlignment = Enum.TextXAlignment.Left

	UIPadding.Parent = text
	UIPadding.PaddingLeft = UDim.new(0, 20)

	tbIndicator.Name = "tbIndicator"
	tbIndicator.Parent = tabButton
	tbIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	tbIndicator.BackgroundTransparency = 1.000
	tbIndicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
	tbIndicator.BorderSizePixel = 0
	tbIndicator.Size = UDim2.new(1, 0, 1, 0)
	tbIndicator.Font = Enum.Font.SourceSans
	tbIndicator.Text = ""
	tbIndicator.TextColor3 = Color3.fromRGB(0, 0, 0)
	tbIndicator.TextSize = 14.000
	
	table.insert(Tabs, tabButton)
	
	local ContentFrame = Instance.new("ScrollingFrame")
	local UIListLayout = Instance.new("UIListLayout")
	local UIPadding = Instance.new("UIPadding")

	ContentFrame.Name = "ContentFrame"
	ContentFrame.Parent = menu.bg.bg2
	ContentFrame.Active = true
	ContentFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ContentFrame.BackgroundTransparency = 1.000
	ContentFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ContentFrame.BorderSizePixel = 0
	ContentFrame.Size = UDim2.new(1, 0, 1, 0)
	ContentFrame.CanvasSize = UDim2.new(0, 0, 2, 0)
	ContentFrame.ScrollBarThickness = 0
	ContentFrame.Visible = #Tabs == 1

	UIListLayout.Parent = ContentFrame
	UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 15)

	UIPadding.Parent = ContentFrame
	UIPadding.PaddingTop = UDim.new(0, 20)
	
	local TabContent = {}
	TabContent.Elements = {}
	
	Tabs[tabButton] = ContentFrame

	local TweenService = game:GetService("TweenService")

	tbIndicator.MouseButton1Click:Connect(function()
		local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
	
		for _, tab in pairs(Tabs) do
			if tab:IsA("ScrollingFrame") then
				tab.Visible = false
			end
		end
	
		for _, TabButton in pairs(Tabs) do
			if TabButton:IsA("Frame") then
				local tabGradient = TabButton:FindFirstChild("UIGradient")
				local tabStrokeGradient = TabButton.UIStroke and TabButton.UIStroke:FindFirstChild("UIGradient")
	
				if tabGradient then
					TweenService:Create(tabGradient, tweenInfo, {Offset = Vector2.new(1, 0)}):Play()
				end
	
				if tabStrokeGradient then
					TweenService:Create(tabStrokeGradient, tweenInfo, {Offset = Vector2.new(1, 0)}):Play()
				end
			end
		end

		TweenService:Create(UIGradient, tweenInfo, {Offset = Vector2.new(-0.2, 0)}):Play()
		TweenService:Create(UIGradient_1, tweenInfo, {Offset = Vector2.new(-0.2, 0)}):Play()

		ContentFrame.Visible = true
	end)
	
	
	
	
	function TabContent:addButton(buttonData)
		local Button = Instance.new("Frame")
		local UICorner = Instance.new("UICorner")
		local UIGradient = Instance.new("UIGradient")
		local UIStroke = Instance.new("UIStroke")
		local UIGradient_1 = Instance.new("UIGradient")
		local text = Instance.new("TextLabel")
		local UIPadding = Instance.new("UIPadding")
		local bIndicator = Instance.new("TextButton")

		Button.Name = "Button"
		Button.Parent = ContentFrame
		Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Button.BorderSizePixel = 0
		Button.Size = UDim2.new(0.899999976, 0, 0, 35)

		UICorner.Parent = Button

		UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(14, 14, 14)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(40, 35, 76))}
		UIGradient.Offset = Vector2.new(1, 0)
		UIGradient.Parent = Button

		UIStroke.Color = Color3.fromRGB(255, 255, 255)
		UIStroke.Thickness = 2
		UIStroke.Parent = Button

		UIGradient_1.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 30, 30)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(115, 100, 215))}
		UIGradient_1.Offset = Vector2.new(1, 0)
		UIGradient_1.Enabled = true
		UIGradient_1.Parent = UIStroke

		text.Name = "text"
		text.Parent = Button
		text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		text.BackgroundTransparency = 1.000
		text.BorderColor3 = Color3.fromRGB(0, 0, 0)
		text.BorderSizePixel = 0
		text.Size = UDim2.new(1, 0, 1, 0)
		text.Font = Enum.Font.Roboto
		text.Text = buttonData.text
		text.TextColor3 = Color3.fromRGB(255, 255, 255)
		text.TextSize = 16.000
		text.TextWrapped = true
		text.TextXAlignment = Enum.TextXAlignment.Left

		UIPadding.Parent = text
		UIPadding.PaddingLeft = UDim.new(0, 40)

		bIndicator.Name = "bIndicator"
		bIndicator.Parent = Button
		bIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		bIndicator.BackgroundTransparency = 1.000
		bIndicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
		bIndicator.BorderSizePixel = 0
		bIndicator.Size = UDim2.new(1, 0, 1, 0)
		bIndicator.Font = Enum.Font.SourceSans
		bIndicator.Text = ""
		bIndicator.TextColor3 = Color3.fromRGB(0, 0, 0)
		bIndicator.TextSize = 14.000

		local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out, 0, false, 0)
		bIndicator.MouseEnter:Connect(function()
			TweenService:Create(UIGradient, tweenInfo, {Offset = Vector2.new(0.4, 0)}):Play()
			TweenService:Create(UIGradient_1, tweenInfo, {Offset = Vector2.new(0.4, 0)}):Play()
		end)

		bIndicator.MouseLeave:Connect(function()
			TweenService:Create(UIGradient, tweenInfo, {Offset = Vector2.new(1, 0)}):Play()
			TweenService:Create(UIGradient_1, tweenInfo, {Offset = Vector2.new(1, 0)}):Play()
		end)
		
		bIndicator.MouseButton1Click:Connect(function()
			if buttonData.callback then
				buttonData.callback()
			end
		end)
		
		table.insert(self.Elements, Button)
		
		return Button
	end
	
	function TabContent:addToggle(toggleData)
		local Toggle = Instance.new("Frame")
		local UICorner = Instance.new("UICorner")
		local UIGradient = Instance.new("UIGradient")
		local UIStroke = Instance.new("UIStroke")
		local UIGradient_1 = Instance.new("UIGradient")
		local text = Instance.new("TextLabel")
		local UIPadding = Instance.new("UIPadding")
		local tIndicator = Instance.new("TextButton")
		local Boolean = Instance.new("Frame")
		local BooleanUIStroke = Instance.new("UIStroke")
		local UICorner_2 = Instance.new("UICorner")
		local Circle = Instance.new("Frame")
		local UICorner_3 = Instance.new("UICorner")
		local UIPadding_2 = Instance.new("UIPadding")
		local CircleUIStroke = Instance.new("UIStroke")

		Toggle.Name = "Toggle"
		Toggle.Parent = ContentFrame
		Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Toggle.BorderSizePixel = 0
		Toggle.Size = UDim2.new(0.899999976, 0, 0, 35)

		UICorner.Parent = Toggle

		UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(14, 14, 14)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(40, 35, 76))}
		UIGradient.Offset = Vector2.new(1, 0)
		UIGradient.Parent = Toggle

		UIStroke.Color = Color3.fromRGB(255, 255, 255)
		UIStroke.Thickness = 2
		UIStroke.Parent = Toggle

		UIGradient_1.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 30, 30)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(115, 100, 215))}
		UIGradient_1.Offset = Vector2.new(1, 0)
		UIGradient_1.Parent = UIStroke

		text.Name = "text"
		text.Parent = Toggle
		text.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		text.BackgroundTransparency = 1.000
		text.BorderColor3 = Color3.fromRGB(0, 0, 0)
		text.BorderSizePixel = 0
		text.Size = UDim2.new(1, 0, 1, 0)
		text.Font = Enum.Font.Roboto
		text.Text = toggleData.text
		text.TextColor3 = Color3.fromRGB(255, 255, 255)
		text.TextSize = 16.000
		text.TextWrapped = true
		text.TextXAlignment = Enum.TextXAlignment.Left

		UIPadding.Parent = text
		UIPadding.PaddingLeft = UDim.new(0, 40)

		tIndicator.Name = "tIndicator"
		tIndicator.Parent = Toggle
		tIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		tIndicator.BackgroundTransparency = 1.000
		tIndicator.BorderColor3 = Color3.fromRGB(0, 0, 0)
		tIndicator.BorderSizePixel = 0
		tIndicator.Size = UDim2.new(1, 0, 1, 0)
		tIndicator.Font = Enum.Font.SourceSans
		tIndicator.Text = ""
		tIndicator.TextColor3 = Color3.fromRGB(0, 0, 0)
		tIndicator.TextSize = 14.000

		Boolean.Name = "Boolean"
		Boolean.Parent = Toggle
		Boolean.AnchorPoint = Vector2.new(0.5, 0.5)
		Boolean.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		Boolean.BackgroundTransparency = 1.000
		Boolean.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Boolean.BorderSizePixel = 0
		Boolean.Position = UDim2.new(0.904311776, 0, 0.5, 0)
		Boolean.Size = UDim2.new(0, 50, 0, 25)

		BooleanUIStroke.Color = Color3.fromRGB(30, 30, 30)
		BooleanUIStroke.Thickness = 1
		BooleanUIStroke.Parent = Boolean

		UICorner_2.CornerRadius = UDim.new(0, 16)
		UICorner_2.Parent = Boolean

		Circle.Name = "Circle"
		Circle.Parent = Boolean
		Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Circle.BackgroundTransparency = 1.000
		Circle.BorderColor3 = Color3.fromRGB(0, 0, 0)
		Circle.BorderSizePixel = 0
		Circle.Position = UDim2.new(0, 0, 0, 2)
		Circle.Size = UDim2.new(0, 20, 0, 20)

		CircleUIStroke.Color = Color3.fromRGB(30, 30, 30)
		CircleUIStroke.Thickness = 1
		CircleUIStroke.Parent = Circle

		UICorner_3.CornerRadius = UDim.new(1, 0)
		UICorner_3.Parent = Circle

		UIPadding_2.Parent = Boolean
		UIPadding_2.PaddingLeft = UDim.new(0, 5)
		UIPadding_2.PaddingRight = UDim.new(0, 5)
		
		local toggled = false
		
		tIndicator.MouseButton1Click:Connect(function()
			toggled = not toggled
			
			local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out, 0, false, 0)
			if toggled then
				TweenService:Create(UIGradient, tweenInfo, {Offset = Vector2.new(0.4, 0)}):Play()
				TweenService:Create(UIGradient_1, tweenInfo, {Offset = Vector2.new(0.4, 0)}):Play()
				TweenService:Create(Circle, tweenInfo, {Position = UDim2.new(0.5, 0, 0, 2)}):Play()
				TweenService:Create(BooleanUIStroke, tweenInfo, {Color = Color3.fromRGB(115, 100, 215)}):Play()
				TweenService:Create(CircleUIStroke, tweenInfo, {Color = Color3.fromRGB(115, 100, 215)}):Play()
			else
				TweenService:Create(UIGradient, tweenInfo, {Offset = Vector2.new(1, 0)}):Play()
				TweenService:Create(UIGradient_1, tweenInfo, {Offset = Vector2.new(1, 0)}):Play()
				TweenService:Create(Circle, tweenInfo, {Position = UDim2.new(0, 0, 0, 2)}):Play()
				TweenService:Create(BooleanUIStroke, tweenInfo, {Color = Color3.fromRGB(30, 30, 30)}):Play()
				TweenService:Create(CircleUIStroke, tweenInfo, {Color = Color3.fromRGB(30, 30, 30)}):Play()
			end
			
			if toggleData.callback then
				toggleData.callback(toggled)
			end
		end)
		
		return Toggle
	end
	
	return TabContent
end

return Library
